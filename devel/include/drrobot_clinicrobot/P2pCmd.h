// Generated by gencpp from file drrobot_clinicrobot/P2pCmd.msg
// DO NOT EDIT!


#ifndef DRROBOT_CLINICROBOT_MESSAGE_P2PCMD_H
#define DRROBOT_CLINICROBOT_MESSAGE_P2PCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drrobot_clinicrobot
{
template <class ContainerAllocator>
struct P2pCmd_
{
  typedef P2pCmd_<ContainerAllocator> Type;

  P2pCmd_()
    : TargetX(0.0)
    , TargetY(0.0)
    , TargetDir(0.0)
    , ForwardSpeed(0.0)
    , CAEnable(0)
    , ReverseDrive(0)  {
    }
  P2pCmd_(const ContainerAllocator& _alloc)
    : TargetX(0.0)
    , TargetY(0.0)
    , TargetDir(0.0)
    , ForwardSpeed(0.0)
    , CAEnable(0)
    , ReverseDrive(0)  {
    }



   typedef float _TargetX_type;
  _TargetX_type TargetX;

   typedef float _TargetY_type;
  _TargetY_type TargetY;

   typedef float _TargetDir_type;
  _TargetDir_type TargetDir;

   typedef float _ForwardSpeed_type;
  _ForwardSpeed_type ForwardSpeed;

   typedef uint8_t _CAEnable_type;
  _CAEnable_type CAEnable;

   typedef uint8_t _ReverseDrive_type;
  _ReverseDrive_type ReverseDrive;




  typedef boost::shared_ptr< ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator> const> ConstPtr;

}; // struct P2pCmd_

typedef ::drrobot_clinicrobot::P2pCmd_<std::allocator<void> > P2pCmd;

typedef boost::shared_ptr< ::drrobot_clinicrobot::P2pCmd > P2pCmdPtr;
typedef boost::shared_ptr< ::drrobot_clinicrobot::P2pCmd const> P2pCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace drrobot_clinicrobot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'drrobot_clinicrobot': ['/home/drrobot2/hokuyo_exp/src/drrobot_clinicrobot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c12145f741c94dc887f31111234d185";
  }

  static const char* value(const ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c12145f741c94dcULL;
  static const uint64_t static_value2 = 0x887f31111234d185ULL;
};

template<class ContainerAllocator>
struct DataType< ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drrobot_clinicrobot/P2pCmd";
  }

  static const char* value(const ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# P2P go message\n\
\n\
float32 TargetX\n\
float32 TargetY\n\
float32 TargetDir     #in degrees\n\
float32 ForwardSpeed\n\
uint8 CAEnable        # 0 is collision avoidance disabled, 1 is enabled\n\
uint8 ReverseDrive    # 0 is reverse drive disabled, 1 is enabled\n\
\n\
";
  }

  static const char* value(const ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.TargetX);
      stream.next(m.TargetY);
      stream.next(m.TargetDir);
      stream.next(m.ForwardSpeed);
      stream.next(m.CAEnable);
      stream.next(m.ReverseDrive);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct P2pCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drrobot_clinicrobot::P2pCmd_<ContainerAllocator>& v)
  {
    s << indent << "TargetX: ";
    Printer<float>::stream(s, indent + "  ", v.TargetX);
    s << indent << "TargetY: ";
    Printer<float>::stream(s, indent + "  ", v.TargetY);
    s << indent << "TargetDir: ";
    Printer<float>::stream(s, indent + "  ", v.TargetDir);
    s << indent << "ForwardSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.ForwardSpeed);
    s << indent << "CAEnable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAEnable);
    s << indent << "ReverseDrive: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ReverseDrive);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRROBOT_CLINICROBOT_MESSAGE_P2PCMD_H

// Generated by gencpp from file drrobot_clinicrobot/MotorCmd.msg
// DO NOT EDIT!


#ifndef DRROBOT_CLINICROBOT_MESSAGE_MOTORCMD_H
#define DRROBOT_CLINICROBOT_MESSAGE_MOTORCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drrobot_clinicrobot
{
template <class ContainerAllocator>
struct MotorCmd_
{
  typedef MotorCmd_<ContainerAllocator> Type;

  MotorCmd_()
    : motorcmd1(0)
    , motorCmd2(0)
    , motorCtrl(0)  {
    }
  MotorCmd_(const ContainerAllocator& _alloc)
    : motorcmd1(0)
    , motorCmd2(0)
    , motorCtrl(0)  {
    }



   typedef int32_t _motorcmd1_type;
  _motorcmd1_type motorcmd1;

   typedef int32_t _motorCmd2_type;
  _motorCmd2_type motorCmd2;

   typedef int32_t _motorCtrl_type;
  _motorCtrl_type motorCtrl;




  typedef boost::shared_ptr< ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator> const> ConstPtr;

}; // struct MotorCmd_

typedef ::drrobot_clinicrobot::MotorCmd_<std::allocator<void> > MotorCmd;

typedef boost::shared_ptr< ::drrobot_clinicrobot::MotorCmd > MotorCmdPtr;
typedef boost::shared_ptr< ::drrobot_clinicrobot::MotorCmd const> MotorCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace drrobot_clinicrobot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'drrobot_clinicrobot': ['/home/drrobot2/hokuyo_exp/src/drrobot_clinicrobot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83414dfe9e393966fab06f8909c63052";
  }

  static const char* value(const ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83414dfe9e393966ULL;
  static const uint64_t static_value2 = 0xfab06f8909c63052ULL;
};

template<class ContainerAllocator>
struct DataType< ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drrobot_clinicrobot/MotorCmd";
  }

  static const char* value(const ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# wheel motor command message from DrRobot Robot.\n\
int32 motorcmd1		# left motor encoder command value\n\
int32 motorCmd2	        # right motor encoder Comamnd value\n\
int32 motorCtrl		# motor ctrl method , 0-- PWM, 1-- velocity  2-- position\n\
\n\
";
  }

  static const char* value(const ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motorcmd1);
      stream.next(m.motorCmd2);
      stream.next(m.motorCtrl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct MotorCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drrobot_clinicrobot::MotorCmd_<ContainerAllocator>& v)
  {
    s << indent << "motorcmd1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motorcmd1);
    s << indent << "motorCmd2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motorCmd2);
    s << indent << "motorCtrl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motorCtrl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRROBOT_CLINICROBOT_MESSAGE_MOTORCMD_H

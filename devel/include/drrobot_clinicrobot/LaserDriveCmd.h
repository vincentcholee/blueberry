// Generated by gencpp from file drrobot_clinicrobot/LaserDriveCmd.msg
// DO NOT EDIT!


#ifndef DRROBOT_CLINICROBOT_MESSAGE_LASERDRIVECMD_H
#define DRROBOT_CLINICROBOT_MESSAGE_LASERDRIVECMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drrobot_clinicrobot
{
template <class ContainerAllocator>
struct LaserDriveCmd_
{
  typedef LaserDriveCmd_<ContainerAllocator> Type;

  LaserDriveCmd_()
    : tilt_pos(0.0)
    , auto_scan_flag(0)  {
    }
  LaserDriveCmd_(const ContainerAllocator& _alloc)
    : tilt_pos(0.0)
    , auto_scan_flag(0)  {
    }



   typedef float _tilt_pos_type;
  _tilt_pos_type tilt_pos;

   typedef int32_t _auto_scan_flag_type;
  _auto_scan_flag_type auto_scan_flag;




  typedef boost::shared_ptr< ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator> const> ConstPtr;

}; // struct LaserDriveCmd_

typedef ::drrobot_clinicrobot::LaserDriveCmd_<std::allocator<void> > LaserDriveCmd;

typedef boost::shared_ptr< ::drrobot_clinicrobot::LaserDriveCmd > LaserDriveCmdPtr;
typedef boost::shared_ptr< ::drrobot_clinicrobot::LaserDriveCmd const> LaserDriveCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace drrobot_clinicrobot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'drrobot_clinicrobot': ['/home/drrobot2/hokuyo_exp/src/drrobot_clinicrobot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4014e77e6d883222bc1b69ceb9b011b5";
  }

  static const char* value(const ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4014e77e6d883222ULL;
  static const uint64_t static_value2 = 0xbc1b69ceb9b011b5ULL;
};

template<class ContainerAllocator>
struct DataType< ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drrobot_clinicrobot/LaserDriveCmd";
  }

  static const char* value(const ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# laser motor command message from DrRobot Robot.\n\
float32 tilt_pos		# laser tilt angle(-20~20), unit:degree\n\
int32 auto_scan_flag	# 1- auto scan, 0 -stop ,-1, just position contorl\n\
\n\
";
  }

  static const char* value(const ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tilt_pos);
      stream.next(m.auto_scan_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct LaserDriveCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drrobot_clinicrobot::LaserDriveCmd_<ContainerAllocator>& v)
  {
    s << indent << "tilt_pos: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_pos);
    s << indent << "auto_scan_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.auto_scan_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRROBOT_CLINICROBOT_MESSAGE_LASERDRIVECMD_H

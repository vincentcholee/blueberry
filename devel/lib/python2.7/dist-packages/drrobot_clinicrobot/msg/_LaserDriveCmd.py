"""autogenerated by genpy from drrobot_clinicrobot/LaserDriveCmd.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LaserDriveCmd(genpy.Message):
  _md5sum = "4014e77e6d883222bc1b69ceb9b011b5"
  _type = "drrobot_clinicrobot/LaserDriveCmd"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# laser motor command message from DrRobot Robot.
float32 tilt_pos		# laser tilt angle(-20~20), unit:degree
int32 auto_scan_flag	# 1- auto scan, 0 -stop ,-1, just position contorl


"""
  __slots__ = ['tilt_pos','auto_scan_flag']
  _slot_types = ['float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tilt_pos,auto_scan_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LaserDriveCmd, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.tilt_pos is None:
        self.tilt_pos = 0.
      if self.auto_scan_flag is None:
        self.auto_scan_flag = 0
    else:
      self.tilt_pos = 0.
      self.auto_scan_flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_fi.pack(_x.tilt_pos, _x.auto_scan_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.tilt_pos, _x.auto_scan_flag,) = _struct_fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_fi.pack(_x.tilt_pos, _x.auto_scan_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.tilt_pos, _x.auto_scan_flag,) = _struct_fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_fi = struct.Struct("<fi")

"""autogenerated by genpy from drrobot_clinicrobot/PowerInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PowerInfo(genpy.Message):
  _md5sum = "c19e8d592d8f15bf9ff68a439be7b96c"
  _type = "drrobot_clinicrobot/PowerInfo"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# battery /power information message from DrRobot Robot.

Header header    	# timestamp in the header is the time the driver

float32 battery_vol		# battery voltage, if not in charge station, it also would be system voltage
float32 system_vol	# system power voltage, in charge station, it would be 24V DC power
float32 battery_fuel	# battery fuel, estimate by fuel table
float32 dcin_vol	# dcin power voltage reading, only avaiable in chage state
float32 dcin_current	#  for charger
uint32 charge_time_min	# charging minute
uint32 charge_time_sec	# charging second
uint8 charge_error_code	# charging error code
uint8 charge_mode	# charge mode
uint8 charge_status	# charging state, finish or not
uint8 charge_rx_status	# charging state
float32 charger_temperature	# charger CPU temperature
float32 set_charge_current	# set charge current
uint8 charge_flag	# charging or not, 1- charing, 0- not
uint8 in_chargestation_flag	# in charge station or not, 1-in, 0-not
float32[6] cell_vol	# cell voltage
float32[6] cell_res	# cell resistor

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','battery_vol','system_vol','battery_fuel','dcin_vol','dcin_current','charge_time_min','charge_time_sec','charge_error_code','charge_mode','charge_status','charge_rx_status','charger_temperature','set_charge_current','charge_flag','in_chargestation_flag','cell_vol','cell_res']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','uint32','uint32','uint8','uint8','uint8','uint8','float32','float32','uint8','uint8','float32[6]','float32[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,battery_vol,system_vol,battery_fuel,dcin_vol,dcin_current,charge_time_min,charge_time_sec,charge_error_code,charge_mode,charge_status,charge_rx_status,charger_temperature,set_charge_current,charge_flag,in_chargestation_flag,cell_vol,cell_res

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PowerInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.battery_vol is None:
        self.battery_vol = 0.
      if self.system_vol is None:
        self.system_vol = 0.
      if self.battery_fuel is None:
        self.battery_fuel = 0.
      if self.dcin_vol is None:
        self.dcin_vol = 0.
      if self.dcin_current is None:
        self.dcin_current = 0.
      if self.charge_time_min is None:
        self.charge_time_min = 0
      if self.charge_time_sec is None:
        self.charge_time_sec = 0
      if self.charge_error_code is None:
        self.charge_error_code = 0
      if self.charge_mode is None:
        self.charge_mode = 0
      if self.charge_status is None:
        self.charge_status = 0
      if self.charge_rx_status is None:
        self.charge_rx_status = 0
      if self.charger_temperature is None:
        self.charger_temperature = 0.
      if self.set_charge_current is None:
        self.set_charge_current = 0.
      if self.charge_flag is None:
        self.charge_flag = 0
      if self.in_chargestation_flag is None:
        self.in_chargestation_flag = 0
      if self.cell_vol is None:
        self.cell_vol = [0.,0.,0.,0.,0.,0.]
      if self.cell_res is None:
        self.cell_res = [0.,0.,0.,0.,0.,0.]
    else:
      self.header = std_msgs.msg.Header()
      self.battery_vol = 0.
      self.system_vol = 0.
      self.battery_fuel = 0.
      self.dcin_vol = 0.
      self.dcin_current = 0.
      self.charge_time_min = 0
      self.charge_time_sec = 0
      self.charge_error_code = 0
      self.charge_mode = 0
      self.charge_status = 0
      self.charge_rx_status = 0
      self.charger_temperature = 0.
      self.set_charge_current = 0.
      self.charge_flag = 0
      self.in_chargestation_flag = 0
      self.cell_vol = [0.,0.,0.,0.,0.,0.]
      self.cell_res = [0.,0.,0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5f2I4B2f2B.pack(_x.battery_vol, _x.system_vol, _x.battery_fuel, _x.dcin_vol, _x.dcin_current, _x.charge_time_min, _x.charge_time_sec, _x.charge_error_code, _x.charge_mode, _x.charge_status, _x.charge_rx_status, _x.charger_temperature, _x.set_charge_current, _x.charge_flag, _x.in_chargestation_flag))
      buff.write(_struct_6f.pack(*self.cell_vol))
      buff.write(_struct_6f.pack(*self.cell_res))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.battery_vol, _x.system_vol, _x.battery_fuel, _x.dcin_vol, _x.dcin_current, _x.charge_time_min, _x.charge_time_sec, _x.charge_error_code, _x.charge_mode, _x.charge_status, _x.charge_rx_status, _x.charger_temperature, _x.set_charge_current, _x.charge_flag, _x.in_chargestation_flag,) = _struct_5f2I4B2f2B.unpack(str[start:end])
      start = end
      end += 24
      self.cell_vol = _struct_6f.unpack(str[start:end])
      start = end
      end += 24
      self.cell_res = _struct_6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5f2I4B2f2B.pack(_x.battery_vol, _x.system_vol, _x.battery_fuel, _x.dcin_vol, _x.dcin_current, _x.charge_time_min, _x.charge_time_sec, _x.charge_error_code, _x.charge_mode, _x.charge_status, _x.charge_rx_status, _x.charger_temperature, _x.set_charge_current, _x.charge_flag, _x.in_chargestation_flag))
      buff.write(self.cell_vol.tostring())
      buff.write(self.cell_res.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.battery_vol, _x.system_vol, _x.battery_fuel, _x.dcin_vol, _x.dcin_current, _x.charge_time_min, _x.charge_time_sec, _x.charge_error_code, _x.charge_mode, _x.charge_status, _x.charge_rx_status, _x.charger_temperature, _x.set_charge_current, _x.charge_flag, _x.in_chargestation_flag,) = _struct_5f2I4B2f2B.unpack(str[start:end])
      start = end
      end += 24
      self.cell_vol = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 24
      self.cell_res = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_5f2I4B2f2B = struct.Struct("<5f2I4B2f2B")
_struct_6f = struct.Struct("<6f")

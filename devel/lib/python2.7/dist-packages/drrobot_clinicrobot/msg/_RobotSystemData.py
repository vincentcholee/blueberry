"""autogenerated by genpy from drrobot_clinicrobot/RobotSystemData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RobotSystemData(genpy.Message):
  _md5sum = "25a427223be51fd4f54e7fa38fa41527"
  _type = "drrobot_clinicrobot/RobotSystemData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# system Sensor information message from DrRobot Robot.

Header header    	# timestamp in the header is the time
float32 system_vol	# system voltage, normally is battery vol, in charge station, it is DC power voltage
uint8 chargestation_flag	#1-in hcarge station, 0-not
uint8 charge_flag	# 1- charging, 0- not
float32 motionboard_vol	# 5V
float32 robot_x		# robot position X
float32 robot_y		# robot position Y
float32 robot_heading	# robot heading unit:radian
float32 head_tiltangle	# head tile angle, unit: radian
float32 head_panangle	# head pan angle, unit: radian
float32 laser_tiltangle	# laser tilting angle, unit:radian
uint8 bumpsensor	# bump sensor, bit0~bit3
uint8 faceimage_num		# face image number
uint8 power_source	# power source, 0- battery, 1 - dc power

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','system_vol','chargestation_flag','charge_flag','motionboard_vol','robot_x','robot_y','robot_heading','head_tiltangle','head_panangle','laser_tiltangle','bumpsensor','faceimage_num','power_source']
  _slot_types = ['std_msgs/Header','float32','uint8','uint8','float32','float32','float32','float32','float32','float32','float32','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,system_vol,chargestation_flag,charge_flag,motionboard_vol,robot_x,robot_y,robot_heading,head_tiltangle,head_panangle,laser_tiltangle,bumpsensor,faceimage_num,power_source

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotSystemData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.system_vol is None:
        self.system_vol = 0.
      if self.chargestation_flag is None:
        self.chargestation_flag = 0
      if self.charge_flag is None:
        self.charge_flag = 0
      if self.motionboard_vol is None:
        self.motionboard_vol = 0.
      if self.robot_x is None:
        self.robot_x = 0.
      if self.robot_y is None:
        self.robot_y = 0.
      if self.robot_heading is None:
        self.robot_heading = 0.
      if self.head_tiltangle is None:
        self.head_tiltangle = 0.
      if self.head_panangle is None:
        self.head_panangle = 0.
      if self.laser_tiltangle is None:
        self.laser_tiltangle = 0.
      if self.bumpsensor is None:
        self.bumpsensor = 0
      if self.faceimage_num is None:
        self.faceimage_num = 0
      if self.power_source is None:
        self.power_source = 0
    else:
      self.header = std_msgs.msg.Header()
      self.system_vol = 0.
      self.chargestation_flag = 0
      self.charge_flag = 0
      self.motionboard_vol = 0.
      self.robot_x = 0.
      self.robot_y = 0.
      self.robot_heading = 0.
      self.head_tiltangle = 0.
      self.head_panangle = 0.
      self.laser_tiltangle = 0.
      self.bumpsensor = 0
      self.faceimage_num = 0
      self.power_source = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_f2B7f3B.pack(_x.system_vol, _x.chargestation_flag, _x.charge_flag, _x.motionboard_vol, _x.robot_x, _x.robot_y, _x.robot_heading, _x.head_tiltangle, _x.head_panangle, _x.laser_tiltangle, _x.bumpsensor, _x.faceimage_num, _x.power_source))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 37
      (_x.system_vol, _x.chargestation_flag, _x.charge_flag, _x.motionboard_vol, _x.robot_x, _x.robot_y, _x.robot_heading, _x.head_tiltangle, _x.head_panangle, _x.laser_tiltangle, _x.bumpsensor, _x.faceimage_num, _x.power_source,) = _struct_f2B7f3B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_f2B7f3B.pack(_x.system_vol, _x.chargestation_flag, _x.charge_flag, _x.motionboard_vol, _x.robot_x, _x.robot_y, _x.robot_heading, _x.head_tiltangle, _x.head_panangle, _x.laser_tiltangle, _x.bumpsensor, _x.faceimage_num, _x.power_source))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 37
      (_x.system_vol, _x.chargestation_flag, _x.charge_flag, _x.motionboard_vol, _x.robot_x, _x.robot_y, _x.robot_heading, _x.head_tiltangle, _x.head_panangle, _x.laser_tiltangle, _x.bumpsensor, _x.faceimage_num, _x.power_source,) = _struct_f2B7f3B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_f2B7f3B = struct.Struct("<f2B7f3B")
_struct_3I = struct.Struct("<3I")

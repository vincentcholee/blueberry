"""autogenerated by genpy from drrobot_clinicrobot/HeadCmd.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HeadCmd(genpy.Message):
  _md5sum = "33b58503880791edf7de4962dc56195c"
  _type = "drrobot_clinicrobot/HeadCmd"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# head motor command message from DrRobot Robot.
float32 head_tilt_pos		# head tilt angle(-40~40) unit:degree
uint8 head_tiltflag	        # head tilt flag, 0- no control, 1- control
uint32 head_tilt_time		# for head tilt position command time
 
float32 head_pan_pos		# head pan angle(-90~90), unit:degree
uint8 head_panflag	        # head pan flag, 0- no control, 1- control
uint32 head_pan_time		# for head pan position command time

"""
  __slots__ = ['head_tilt_pos','head_tiltflag','head_tilt_time','head_pan_pos','head_panflag','head_pan_time']
  _slot_types = ['float32','uint8','uint32','float32','uint8','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       head_tilt_pos,head_tiltflag,head_tilt_time,head_pan_pos,head_panflag,head_pan_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HeadCmd, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.head_tilt_pos is None:
        self.head_tilt_pos = 0.
      if self.head_tiltflag is None:
        self.head_tiltflag = 0
      if self.head_tilt_time is None:
        self.head_tilt_time = 0
      if self.head_pan_pos is None:
        self.head_pan_pos = 0.
      if self.head_panflag is None:
        self.head_panflag = 0
      if self.head_pan_time is None:
        self.head_pan_time = 0
    else:
      self.head_tilt_pos = 0.
      self.head_tiltflag = 0
      self.head_tilt_time = 0
      self.head_pan_pos = 0.
      self.head_panflag = 0
      self.head_pan_time = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_fBIfBI.pack(_x.head_tilt_pos, _x.head_tiltflag, _x.head_tilt_time, _x.head_pan_pos, _x.head_panflag, _x.head_pan_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.head_tilt_pos, _x.head_tiltflag, _x.head_tilt_time, _x.head_pan_pos, _x.head_panflag, _x.head_pan_time,) = _struct_fBIfBI.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_fBIfBI.pack(_x.head_tilt_pos, _x.head_tiltflag, _x.head_tilt_time, _x.head_pan_pos, _x.head_panflag, _x.head_pan_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.head_tilt_pos, _x.head_tiltflag, _x.head_tilt_time, _x.head_pan_pos, _x.head_panflag, _x.head_pan_time,) = _struct_fBIfBI.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_fBIfBI = struct.Struct("<fBIfBI")
